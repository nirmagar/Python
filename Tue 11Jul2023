#4.3.1.6 LAB A leap year: writing your own functions
def is_year_leap(year):       #Function is_year_leap(year)
    if yr % 4 == 0:           #Check if the year is divisible by 4
        if yr % 100 == 0:     #Check if the year is divisible by 100
            if yr % 400 == 0: #Check if the year is divisible by 400
                return True     #Leap Year
            else:
                return False    #Not Leap Year
        else:
            return True         #Leap Year
    else:
        return False             #Not Leap Year

#Test the function for each year in the test_data list
test_data = [1900, 2000, 2016, 1987]
test_results = [False, True, True, False]
for i in range(len(test_data)):
	yr = test_data[i]
	print(yr,"->",end="")
	result = is_year_leap(yr)
	if result == test_results[i]:
		print("OK")
	else:
		print("Failed")




#4.3.1.7 LAB: How many days: writing and using your own functions
def is_year_leap(yr):       #Function is_year_leap(year)
    if yr % 4 == 0:           #Check if the year is divisible by 4
        if yr % 100 == 0:     #Check if the year is divisible by 100
            if yr % 400 == 0: #Check if the year is divisible by 400
                return True     #Leap Year
            else:
                return False    #Not Leap Year
        else:
            return True         #Leap Year
    else:
        return False             #Not Leap Year

def days_in_month(year, month):

    # List of month lengths (non-leap year)
    month_lengths = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]

    # Check if arguments are valid
    if month < 1 or month > 12 or year < 1:
        return None

    # Update February length if it's a leap year
    if is_year_leap(year):
        month_lengths[1] = 29

    return month_lengths[month - 1]

test_years = [1900, 2000, 2016, 1987]
test_months = [2, 2, 1, 11]
test_results = [28, 29, 31, 30]
for i in range(len(test_years)):
	yr = test_years[i]
	mo = test_months[i]
	print(yr, mo, "->", end="")
	result = days_in_month(yr, mo)
	if result == test_results[i]:
		print("OK")
	else:
		print("Failed")


#4.3.1.8 LAB
def is_year_leap(year):
    # Your code from LAB 4.3.1.6
    if year % 4 == 0:
        if year % 100 == 0 and year % 400 != 0:
            return False
        else:
            return True
    else:
        return False

def days_in_month(year, month):
    # Your code from LAB 4.3.1.7
    if month < 1 or month > 12 or year < 1:
        return None

    month_lengths = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]

    if is_year_leap(year):
        month_lengths[1] = 29

    return month_lengths[month - 1]

def day_of_year(year, month, day):
    # Write your new code here
    if month < 1 or month > 12 or year < 1 or day < 1 or day > days_in_month(year, month):
        return None

    day_count = 0
    for i in range(1, month):
        day_count += days_in_month(year, i)
    
    day_count += day
    
    return day_count

print(day_of_year(2000, 12, 31))



#4.3.1.9 LAB
def is_prime(num):     #Defining function is_prime()
    if num <= 1:
        return False

    for i in range(2, int(num ** 0.5) + 1):
        if num % i == 0:
            return False
    
    return True

for i in range(1, 20):    
    if is_prime(i + 1):
        print(i + 1, end=" ")
print()

